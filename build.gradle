import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
	}
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'br.com.m2msolutions.copiloto'
version = '1.0.0'
sourceCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}

def grpcVersion = '1.7.0'

dependencies {
	compile 'org.springframework.boot:spring-boot-starter'
	compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
	compile 'org.springframework.boot:spring-boot-starter-cache'
	compile 'org.springframework.boot:spring-boot-starter-websocket'

	compile 'org.springframework:spring-messaging'

	compile 'org.codehaus.groovy:groovy'

	compile 'com.hazelcast:hazelcast:3.9'
	compile 'com.hazelcast:hazelcast-client:3.9'
	compile 'com.hazelcast:hazelcast-spring'

	compile 'br.com.m2msolutions.copiloto:copiloto-led:1.0.0-SNAPSHOT'

	compile 'mysql:mysql-connector-java'

	compile 'com.google.api.grpc:proto-google-common-protos:0.1.9'
	compile "io.grpc:grpc-netty:${grpcVersion}"
	compile "io.grpc:grpc-protobuf:${grpcVersion}"
	compile "io.grpc:grpc-stub:${grpcVersion}"

	runtime 'org.springframework.boot:spring-boot-devtools'

	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
	testCompile 'cglib:cglib-nodep:3.2.2'
}

sourceSets {
	main {
		proto {
			srcDir 'src/main/resources'
		}
	}
}

protobuf {
	protoc {
		artifact = 'com.google.protobuf:protoc:3.4.0'
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {
				option 'enable_deprecated=false'
			}
		}
	}
}

idea {
	module {
		sourceDirs += file("${projectDir}/build/generated/source/proto/main/java")
		sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc")
	}
}

processResources {
	with copySpec {
		from 'src/main/resources'
		include '**/application*.yml'
		include '**/application*.yaml'
		include '**/application*.properties'
		project.properties.findAll().each {
			prop ->
				if (prop.value != null) {
					filter(ReplaceTokens, tokens: [ (prop.key): prop.value])
					filter(ReplaceTokens, tokens: [ ('project.' + prop.key): prop.value])
				}
		}
	}
}

bootRun {
	systemProperties = System.properties
}


